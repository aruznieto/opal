Opal-0.7 (September 2021)
-----------
1. Major changes in the design. Now different simulation types can be added to the manager. It will run them sequentially and the results will be accumulated. It allows the independent implementation and execution of different propagation mechanisms (reflection, diffraction, scattering) and alternative simulation methods.

2. Support for curved surfaces added. Scenarios con use only flat, only curved or combined flat and curved elements. Only certain simulation types can be used with curved surfaces, such as Ray Density Normalization (see below).

3. Ray Density Normalization (RDN) has been added as a method for the simulation of reflections with flat and curved surfaces. Different modes of operation are available for RDN. The default one is not memory bounded and supports launches very high ray density (for instance, 10^9 rays/sr)

4. Single diffraction has been added. Since this is a different propagation mechanism it can be combined with any of the reflection methods (LPFlatReflection or RayDensityNormalization)

5. Generation of rays on GPU has been added. It greatly increases the performance for partial launches.

6. Log traces are done separately for each simulation type now saved to a file and can be visualized in the Unity editor directly.

7. Many additional minor changes and reorganization of code.

Opal-0.6 (November 2019)
-----------
1. Added a preprocessor tag in `Common.h` to use a technique for avoiding self-intersections. But this is going to introduce some small precision errors in the computed electric field, since the ray lengths are modified due to a displacement.  If you do not need very high accuracy (which is the usual case) you can  uncomment it. Otherwise keep it, but then you have to tune minEpsilon, which is not scale-invariant. If your simulation gets stuck in a launch, try uncommenting it.  If it is no longer stuck but you need high precision, comment it again an tune minEpsilon until it is removed.

2. Added a simple trace log for visualization. This creates a trace log on the standard output that can be processed with a external program basically to visualize the reflections. Have to be uncommented in `Common.h`.

3. Reorganized the contents to provide a cleaner separation of optix programs and host code.

4. All previous features should work again.

5. In my tests and with my hardware I cannot see noticeable performance differences between  arbitrary polarization and the basic approach. So it is probably a good idea to always enable depolarization. 

Opal-0.5 (November 2019)
-----------
1. Partial launches support. You can split a launch in multiple steps.  With this feature you can now perform very high angular density sampling, that is, use very low angular separation and scan the sphere by zones:
You can launch only for a given solid angle, with the angular separation you decide. Results are correctly filtered with thrust on the GPU and carried over additional launches until the launch is finished. This is useful mainly for electromagnetic characterization, where you need very accurate results. An example of  use is provided
in the tunnel test.

2. Fast math can be disabled. Again, when doing electromagnetic characterization, accurate results require disabling the fast_math option of the NVRTC compiler, to avoid approximations for cos, sin and other math functions.

3. Memory management has been simplified. Only a global buffer and an atomic buffer is used for all the configurations, including multi-GPU. A large buffer is used to hold all the hits, independently of other scene parameters,
such as the number of receivers receivers. Buffers are not resized during the simulation.  All together should improve the performance.

4. Depolarization has been thoroughly tested and validated. In our tests, full depolarization does not impact appreciably the performance and should be the preferred method.

5. Fixed a bug in the filtering algorith, where the operator== was not implemented correctly.
The filtering algorithm has been separated from the transfer to the host device, to facilitate partial launches. In addition, a memory management procedure to handle
very large results (due to low AS and partial launches) has been added to the filtering code.


6. Tests have been moved to a separate folder and better organized.


Opal-0.4 (June 2019)
-----------
1. Depolarization added. Now, you can use arbitrary and different linear polarizations for transmitters and receivers. It also allows to simulate leaning (non horizontal or vertical) walls. It also has a performance cost,
so it can be enabled or disabled. Polarization programas are in their own folder.

2. Multiple GPU support. Multiple GPUs can be used seamlessly with Optix. However, our implementation of the filtering duplicates algorithms requires a global buffer. We have added and implementation for
multiple GPUs where each local GPU buffer is merged and filtered with thrust.

3. Add a different different payload type. Now we have the HVWavePayload for the default mode with vertical or horizontal polarization and a LPWavePayload for arbitrary linear polarizations. In both cases,
the fields have been packed as suggested in the documentation to improve the performance.



Opal-0.3 (April 2019)
-----------
1. Penetration added. Now rays can penetrate environment elements. Penetration uses recursive tracing and incurs in a performance penalty, so it
can be enabled or disabled. A transmission coefficient plus an independent material attenuation are aplied to the rays.
  - MaterialEMProperties has been updated to support attenuation.

2. Merged single and multitransmitter launches. Now all launches are 3D, with the z dimension used for the number of transmitters. A single
transmitter sets z=1 (as used in OMNET). Code is cleaner and it should also improve performance (see https://devtalk.nvidia.com/default/topic/1048952/optix/recompile-question/ about setting variables vs buffer).
 - Removed all single/multi* .cu files, since we do not distinguish any more.
 - HitInfo now includes the transmitter buffer index and is sorted according to the transmitter

 3. Changed callable programs to device functions. According to https://devtalk.nvidia.com/default/topic/1048990/optix/question-about-function-vs-callable-programs/
 callable programs are necessary if we need virtual function like functionality, which we don't at the moment. Complex arithmetic has been put in its own Complex.h

 4. Tests have been moved along with main() to a tests.cpp file.



Opal-0.2 (March 2019)
-----------
1. Multi-transmitter: you can now launch with multiple transmitters in parallel. They are supposed to transmit simultaneously. No interference is computed, the receivers get the power received by each transmitter separately.
To use it, a new class has been derived from the Opal class, since
this feature is not compatible with OMNET++  at the moment.

